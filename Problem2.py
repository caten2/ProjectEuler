"""
Project Euler problem 2

Solution by Charlotte Aten (caten2@u.rochester.edu) 2015

Problem statement:
    Each new term in the Fibonacci sequence is generated by adding the previous two terms.
    By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    By considering the terms in the Fibonacci sequence whose values do not exceed four million,
    find the sum of the even-valued terms.
"""

class Fibonacci():
    """
    The infinite sequence beginning with 1,2 where each subsequent term is obtained by
    adding the previous two terms in the sequence.
    """

    def __repr__(self):
        return 'The Fibonacci sequence.'

    def sequence(self):
        """
        Generate numbers in the Fibonacci sequence.
        
        Yields:
            int: The next term in the Fibonacci sequence.
        """

        i = 1
        j = 1
        while True:
            i, j = j, i+j
            yield i

    def first_n_terms(self, number):
        """
        Generate a specified number of terms of the Fibonacci sequence.
        
        Args:
            number (int): The desired number of terms.

        Yields:
            int: The next term of the Fibonacci sequence, if the desired number of terms have not been yielded yet.
        """

        count = 0
        s = self.sequence()
        while count < number:
            yield s.next()
            count += 1

    def list_first_n_terms(self, number):
        """
        Return a list of the several terms yielded by the ``first_n_terms`` generator.
        
        Args:
            number (int): The number of terms of the sequence to list.
        
        Returns:
            list: A list of the first `number` terms in the sequence in the order in which they are yielded by ``first_n_terms``.
        """

        return list(self.first_n_terms(number))

    def sequencce_up_to(self, maximum):
        """
        Generate terms of the Fibonacci sequence strictly less than a specified value.

        Args:
            maximum (int): All terms generated are to be strictly less than this value.

        Yields:
            int: The next term in the sequence, provided it is less than `maximum`.
        """

        s = self.sequence()
        i = s.next()
        while i < maximum:
            yield i
            i = s.next()

    def list_sequence_up_to(self, maximum):
        """
        Return a list of the terms yielded by the ``sequence_up_to`` generator strictly less than a specified value.
        
        Args:
            maximum (int): All terms listed are to be strictly less than this value.
        
        Returns:
            list: A list of those terms in the sequence which are less than `maximum`
            in the order in which they are yielded by ``sequence_up_to``.
        """
        return list(self.sequencce_up_to(maximum))

    def sum_evens_up_to(self, maximum):
        """
        Sum all even terms in the Fibonacci sequence strictly less than a specified value.
        
        Evenness is tested by checking whether the given integer is congruent to 0 modulo 2.
        
        Args:
            maximum (int): All terms summed are to be strictly less than this value.
        
        Returns:
            int: The sum of all even terms yielded by ``sequence_up_to`` for the given value of `maximum`.
        """

        total = 0
        for i in self.sequencce_up_to(maximum):
            # Recall that an integer i is even iff i is congruent to 0 modulo 2.
            if i % 2 == 0:
                total = total + i
        return total

print("Create an object for the Fibonacci sequence and have it give its name.")
f = Fibonacci()
print(f)
print("")

print("List the first 10 terms of the Fibonacci sequence.")
print(f.list_first_n_terms(10))
print("")

print("List the sum of even terms up to 100.")
print(f.sum_evens_up_to(100))
print("")

print("List the sum of even terms up to 4 million.")
print(f.sum_evens_up_to(4000000))